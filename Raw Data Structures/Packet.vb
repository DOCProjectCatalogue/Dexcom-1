''' <summary>
''' Author: Jay Lagorio
''' Date: June 5, 2016
''' Summary: Packet is a structure that is sent or received to or from a Dexcom Receiver device. Byte arrays
''' generated by GetPacketBytes() are suitable to send to the device and Packets created from byte arrays
''' received from the device are suitable for packet validation. Commands used in Packets sent to the device
''' occupy the same offset as ResponseCodes in Packets received from the device.
''' </summary>

Friend Class Packet
    ''' <summary>
    ''' Commands are issued to the device at the Command ID offset
    ''' </summary>
    Public Enum Commands
        Ping = 10                       ' Returns an Ack
        ReadFirmwareHeader = 11         ' Reads XML describing the firmware installed
        ReadDatabasePartitionInfo = 15  ' Retrieves XML describing the storage layout
        ReadDatabasePageRange = 16      ' Gets the number of pages in a database partition
        ReadDatabasePages = 17          ' Gets a database page
        ReadDatabasePageHeader = 18     ' Gets just the header of a database page
        ReadTransmitterID = 25          ' Returns the Transmitter ID
        ReadLanguage = 27               ' Returns the language set on the device
        ReadDisplayTimeOffset = 29      ' Returns the timezone offset
        ReadRealTimeClock = 31          ' Returns the current RTC time
        ReadBatteryLevel = 33           ' Returns information about the battery
        ReadSystemTime = 34             ' Returns the system time at GMT
        ReadSystemTimeOffset = 35       ' Returns the offset to add to the system time to get the local time
        ReadGlucoseUnit = 37            ' Returns the currently set glucose measurement unit (mg/dL vs. mmol/L)
        ReadBlindedMode = 39
        ReadClockMode = 41              ' Returns whether the clock is in 24 hour or 12 hour mode
        ReadDeviceMode = 43
        ReadBatteryState = 48           ' Returns the state of the battery
        ReadHardwareBoardID = 49        ' Returns the hardware board ID
        ReadFirmwareSettings = 54       ' Returns the firmware settings
        ReadEnableSetupWizardFlag = 55  ' Returns whether the setup wizard has been enabled
        ReadSetupWizardState = 57       ' Returns the state of the setup wizard
        ReadCurrentChargerSettings = 59 ' Returns the settings for the charger
        MaximumCommand = 61             ' There are no commands beyond this number (for now)
        MaximumPossibleCommand = 255    ' Command IDs cannot be greater than one byte
    End Enum

    ''' <summary>
    ''' Response codes are returned in Packets at the Command ID offset
    ''' </summary>
    Public Enum ResponseCodes
        Ack = 1                         ' Positive response
        Nak = 2                         ' Negative response (bad CRC)
        InvalidCommand = 3              ' The command was invalid
        InvalidParameter = 4            ' The parameter passed for the command was invalid
        IncompletePacketReceived = 5    ' A packet was delivered that was incomplete
        ReceiverError = 6               ' An error occurred on the reciver
        InvalidMode = 7                 ' The receiver is in an invalid mode
    End Enum

    ' Maximum length of a Packet going to or from a device
    Public Const MaximumPacketLength As Integer = MaximumPayloadLength + MinimumPacketLength

    ' Constants in certain positions in the Packet
    Private Const StartOfFrameSentinel As Integer = 1
    Private Const NULL As Integer = 0

    ' Offsets in the Packet where certain bytes go
    Private Const StartOfFrameOffset As Integer = 0
    Private Const PacketLengthOffset As Integer = 1
    Private Const NullOffset As Integer = 2
    Private Const CommandIdOffset As Integer = 3
    Private Const PayloadOffset As Integer = 4

    ' Maximum, minimum, and constant sizes represented in the packet structure
    Private Const MaximumPayloadLength As Integer = 1584
    Private Const MinimumPacketLength As Integer = 6
    Private Const CRCLength As Integer = 2
    Private Const HeaderLength As Integer = 4

    ' The Command ID associated with a Packet going to the device
    Private pCommand As Byte = 0

    ' The raw payload associated with a Packet going to or coming from the device
    Private pPayload() As Byte = Nothing

    ''' <summary>
    ''' Create a new Packet prepopulated with a Command.
    ''' </summary>
    ''' <param name="Command">The Command to send to the device from the Commands enum</param>
    Sub New(ByVal Command As Commands)
        pCommand = Command
    End Sub

    ''' <summary>
    ''' Create a new Packet prepopulated with a Command and a payload.
    ''' </summary>
    ''' <param name="Command">The Command to send to the device from the Commands enum</param>
    ''' <param name="Payload">An array of bytes representing the raw payload to send to the device</param>
    Sub New(ByVal Command As Commands, ByRef Payload() As Byte)
        pCommand = Command
        pPayload = Payload
    End Sub

    ''' <summary>
    ''' Create a Packet based on raw bytes obtained from a Dexcom Receiver device. If the array
    ''' is Nothing or empty a FormatException is thrown.
    ''' </summary>
    ''' <param name="PacketData">An array of bytes received from a device</param>
    Sub New(ByRef PacketData() As Byte)
        If PacketData Is Nothing Then
            Throw New FormatException
        End If

        If PacketData.Length >= MinimumPacketLength Then
            pCommand = PacketData(CommandIdOffset)

            If PacketData.Length > MinimumPacketLength Then
                ' There's a payload
                ReDim pPayload(PacketData.Length - HeaderLength - CRCLength - 1)
                Array.Copy(PacketData, HeaderLength, pPayload, 0, pPayload.Length)
            End If
        Else
            Throw New FormatException
        End If
    End Sub

    ''' <summary>
    ''' Returns whether the Packet is valid based on the size of the Packet,
    ''' the payload, and the contents of the header.
    ''' </summary>
    ''' <returns>True if the Packet is valid, False otherwise.</returns>
    Public ReadOnly Property IsValidPacket As Boolean
        Get
            ' If there's a payload, check the length
            If Not pPayload Is Nothing Then
                If pPayload.Length > MaximumPayloadLength Then
                    Return False
                End If
            End If

            ' Check the size of the whole Packet
            Dim PacketBytes() As Byte = GetPacketBytes()
            If (PacketBytes.Length > MaximumPacketLength) Or (PacketBytes.Length < MinimumPacketLength) Then
                Return False
            End If

            ' Check the SOF sentinel
            If PacketBytes(StartOfFrameOffset) <> StartOfFrameSentinel Then
                Return False
            End If

            ' Check the NULL position
            If PacketBytes(NullOffset) <> NULL Then
                Return False
            End If

            ' Check the Command ID
            If PacketBytes(CommandIdOffset) >= Commands.MaximumCommand Then
                Return False
            End If

            Return True
        End Get
    End Property

    ''' <summary>
    ''' Returns whether the bytes passed constitute a complete packet. Verification is performed
    ''' by CRCing the entire packet and comparing it to the last two bytes.
    ''' </summary>
    ''' <param name="PacketBytes">An array of bytes to check</param>
    ''' <returns>True if the packet is complete and the CRCs match, False otherwise</returns>
    Public Shared Function IsPacketComplete(ByRef PacketBytes() As Byte) As Boolean
        ' Check the size of the array
        If Not PacketBytes Is Nothing Then
            If PacketBytes.Length >= MinimumPacketLength Then
                ' CRC the entire packet
                Dim CRC As UShort = (New CRC(0)).ComputeCheckSum(PacketBytes, PacketBytes.Length - 2)
                Dim CRCHigh As Byte = CRC >> 8
                Dim CRCLow As Byte = CRC And &HFF

                ' Compare the computed CRC to the CRC contained in the packet
                If (PacketBytes(PacketBytes.Length - 2) = CRCLow) And (PacketBytes(PacketBytes.Length - 1) = CRCHigh) Then
                    Return True
                End If
            End If
        End If

        Return False
    End Function

    ''' <summary>
    ''' Returns the Packet's Command ID if it is being sent to a Dexcom Receiver device or
    ''' the packet's Response Code if it was received from a device.
    ''' </summary>
    ''' <returns>A value from Commands or ResponseCodes depending on the Packet's origin</returns>
    Public ReadOnly Property CommandId As Byte
        Get
            Return pCommand
        End Get
    End Property

    ''' <summary>
    ''' The contents of the Packet payload, if any.
    ''' </summary>
    ''' <returns>An array of raw bytes representing the payload or Nothing if the payload is empty.</returns>
    Public ReadOnly Property PayloadData As Byte()
        Get
            Return pPayload
        End Get
    End Property

    ''' <summary>
    ''' Returns an array of bytes that represents the current Packet data. The array
    ''' is suitable for sending to the Dexcom Receiver device.
    ''' </summary>
    ''' <returns>An array of bytes representing the Packet.</returns>
    Public Function GetPacketBytes() As Byte()
        ' Declare an array of bytes the minimum length of a packet
        Dim PacketBytes(MinimumPacketLength - 1) As Byte

        ' Place constants at known offsets
        PacketBytes(StartOfFrameOffset) = StartOfFrameSentinel
        PacketBytes(PacketLengthOffset) = MinimumPacketLength
        PacketBytes(NullOffset) = NULL
        PacketBytes(CommandIdOffset) = pCommand

        ' If a payload is being added resize the array preserving the
        ' existing data and copy the payload
        If Not pPayload Is Nothing Then
            ReDim Preserve PacketBytes((PacketBytes.Length - 1) + pPayload.Length)

            ' Copy the payload into the packet body
            pPayload.CopyTo(PacketBytes, PayloadOffset)
            PacketBytes(PacketLengthOffset) = PacketBytes.Length
        End If

        ' Calculate the CRC16 of the packet using the NULL starting value
        Dim CRC As UShort = (New CRC(0)).ComputeCheckSum(PacketBytes, PacketBytes.Length - 2)
        Dim CRCHigh As Byte = CRC >> 8
        Dim CRCLow As Byte = CRC And &HFF

        ' Split the CRC into high and low bytes and include in the packet
        PacketBytes(PacketBytes.Length - 2) = CRCLow
        PacketBytes(PacketBytes.Length - 1) = CRCHigh
        Return PacketBytes
    End Function
End Class